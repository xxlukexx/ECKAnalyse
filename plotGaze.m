function pnl = plotGaze(data, parent, position, filterOutEvents, showAoIs)

if ~exist('parent', 'var') || isempty(parent)
    parent = figure;
end

if ~exist('position', 'var') || isempty(position)
    position = [0, 0, 1, 1];
end

% is data ECKData/ECKDataContainer, or a segment? If segment, convert to
% ECKData before plotting
if isstruct(data) && isfield(data, 'MainBuffer') &&...
        isfield(data, 'TimeBuffer') && isfield(data, 'EventBuffer') &&...
        isfield(data, 'AddData') && isfield(data, 'Label')
    
    tmpSeg = data;
    data = ECKData;
    data.MainBuffer = tmpSeg.MainBuffer;
    data.TimeBuffer = tmpSeg.TimeBuffer;
    data.EventBuffer = tmpSeg.EventBuffer;
    
end

dc = checkDataIn(data);
if length(dc.Data) > 1
    warning('Multiple datasets not yet implemented, will plot just the first dataset.')
end

if ~exist('filterOutEvents', 'var') 
    filterOutEvents = {};
end
filterOutEvents = [filterOutEvents,...
    'TRIAL_ONSET',...
    'TRIAL_OFFSET'];

if ~exist('showAoIs', 'var') || isempty(showAoIs)
    showAoIs = {'ALL'};
end

% get raw gaze data
mb = dc.Data{1}.MainBuffer;
tb = dc.Data{1}.TimeBuffer;
eb = dc.Data{1}.EventBuffer;

if isempty(mb) || isempty(tb)
    pnl = [];
    return
end

% make time vector in secs
timeSeries = double(tb(:, 1) - tb(1, 1)) / 1000000;

% interpolate (nb this will also filter offscreen gaze)
mb = etFilterGazeOnscreen(mb);
[mbi, interpFlags] = etInterpBuffer(mb, tb, 100);
mbs = etSmoothBuffer(mbi);
mba = etAverageEyeBuffer(mbs);

% get x, y data for both L and R eye
gxl = mb(:, 7);
gxr = mb(:, 20);
gyl = mb(:, 8);
gyr = mb(:, 21);

% get x, y data for both L and R eye, interpolated
gxil = mbi(:, 7);
gxir = mbi(:, 20);
gyil = mbi(:, 8);
gyir = mbi(:, 21);

% get x, y data averaged across eyes
gx = mba(:, 7);
gy = mba(:, 8);

% get x, y data interpolated, averaged and smoothed
gxi = mba(:, 7);
gyi = mba(:, 8);

% prepare events for plotting
prepareEvents;

% get velocity
vel = etVelocity(gxi, gyi);

% make subplots (axes)
pnl = uipanel('Parent', parent, 'Position', position, 'BorderType', 'none');
spEvents = subplot(10, 1, 1, 'Parent', pnl);
spX = subplot(10, 1, 2:5, 'Parent', pnl);
spY = subplot(10, 1, 6:9, 'Parent', pnl);
spVel = subplot(10, 1, 10, 'Parent', pnl);

% get vertical proportions of each element
propvEvents = .065;
propvPlots = .405;
propvVel = 1 - propvEvents - (propvPlots * 2);

% set x/width offset (to make axes fit tightly)
px = .12;

% set up vel plot
set(spVel, 'xlim', [min(timeSeries), ceil(max(timeSeries))]);
set(spVel, 'xticklabel', {});
set(spVel, 'ycolor', [0.4, 0.4, 0.4]);
set(spVel, 'xcolor', [0, 0, 0]);
set(spVel, 'yticklabel', {});
set(spVel, 'ytick', []);
set(spVel, 'outerposition', [-px, 0, 1 + (1.7 * px), propvVel]);
set(spVel, 'xgrid', 'on');
set(spVel, 'xminorgrid', 'on')

% set up Y plot
set(spY, 'xlim', [min(timeSeries), ceil(max(timeSeries))]);
set(spY, 'ylim', [0, 1]);
set(spY, 'ytick', 0:.5:1);
set(spY, 'yticklabel', {'B', 'C', 'T'});
set(spY, 'yminortick', 'on');
set(spY, 'ygrid', 'on');
set(spY, 'yminorgrid', 'off');
set(spY, 'ycolor', [0.4, 0.4, 0.4]);
% set(spY, 'xcolor', [0, 0, 0]);
set(spY, 'xcolor', [0.4, 0.4, 0.4]);
set(spY, 'xgrid', 'on');
set(spY, 'xminorgrid', 'on')
set(spY, 'outerposition', [-px, propvVel, 1 + (1.7 * px), propvPlots]);

hold(spY);

% set up X plot
set(spX, 'xlim', [min(timeSeries), ceil(max(timeSeries))]);
set(spX, 'ylim', [0, 1]);
set(spX, 'ytick', 0:.5:1);
set(spX, 'yticklabel', {'L', 'C', 'R'});
set(spX, 'ydir', 'reverse')
set(spX, 'xticklabel', {});
set(spX, 'yminortick', 'on');
set(spX, 'ygrid', 'on');
set(spX, 'yminorgrid', 'off');
set(spX, 'ycolor', [0.4, 0.4, 0.4]);
set(spX, 'xcolor', [0.4, 0.4, 0.4]);
set(spX, 'xgrid', 'on');
set(spX, 'xminorgrid', 'on')
set(spX, 'outerposition', [-px, propvVel + propvPlots, 1 + (1.7 * px), propvPlots]);
hold(spX)

% set up event plot (note this is not visible)
set(spEvents, 'xlim', [min(timeSeries), ceil(max(timeSeries))]);
set(spEvents, 'visible', 'off');
set(spEvents, 'outerposition', [-px, propvVel + (propvPlots * 2), 1 + (1.7 * px), propvEvents]);
hold(spEvents)



hold(spVel)

% colour/line defaults for plotting
rawWidth = 6;
rawAlphaSep = .8;
rawAlphaAvg = .7;
rawColL = [rawAlphaSep, rawAlphaSep, 1];
rawColR = [rawAlphaSep, 1. rawAlphaSep];
rawColA = [1, rawAlphaAvg, rawAlphaAvg];
rawLineStyle = '-';
rawMarkerStyle = '.';
rawMarkerSize = 12;

procWidth = 1;
procAlphaSep = .7;
provAlphaAvg = 0;
procColL = [procAlphaSep, procAlphaSep, 1];
procColR = [procAlphaSep, 1. procAlphaSep];
procColA = [1, provAlphaAvg, 0];
procLineStyle = '-';
procMarkerStyle = '.';
procMarkerSize = 1;

aoiCol = [.65, .4, 1];

intCol = [1, .8, 0];

% plot

% x
text(0, 1, 'X axis',...
    'Color', [.7, .7, .7],...
    'Interpreter', 'none',...
    'FontName', 'Arial',...
    'FontWeight', 'bold',...
    'FontAngle', 'italic',...
    'FontSize', 24,...
    'VerticalAlignment', 'bottom',...
    'Parent', spX);

raw_xl = plot(timeSeries, gxl,...
    'LineWidth', rawWidth,...
    'LineStyle', rawLineStyle,...
    'Marker', rawMarkerStyle,...
    'MarkerSize', rawMarkerSize,...
    'MarkerEdgeColor', 'none',...
    'MarkerFaceColor', rawColL,...
    'Color', rawColL,...
    'LineSmoothing', 'on',...
    'parent', spX);

raw_xr = plot(timeSeries, gxr,...
    'LineWidth', rawWidth,...
    'LineStyle', rawLineStyle,...
    'Marker', rawMarkerStyle,...
    'MarkerSize', rawMarkerSize,...
    'MarkerEdgeColor', 'none',...
    'MarkerFaceColor', rawColR,...
    'Color', rawColR,...
    'LineSmoothing', 'on',...
    'parent', spX);

raw_x = plot(timeSeries, gx,...
    'LineWidth', rawWidth + 1,...
    'LineStyle', rawLineStyle,...
    'Marker', rawMarkerStyle,...
    'MarkerSize', rawMarkerSize,...
    'MarkerEdgeColor', 'none',...
    'MarkerFaceColor', rawColA,...
    'Color', rawColA,...
    'LineSmoothing', 'on',...
    'parent', spX);

interp_xl = plot(timeSeries, gxil,...
    'LineWidth', procWidth, 'Color', procColL,...
    'LineStyle', procLineStyle,...
    'LineSmoothing', 'on',...
    'parent', spX);

interp_xr = plot(timeSeries, gxir,...
    'LineWidth', procWidth, 'Color', procColR,...
    'LineStyle', procLineStyle,...
    'LineSmoothing', 'on',...
    'parent', spX);

interp_x = plot(timeSeries, gxi,...
    'LineWidth', procWidth + 1, 'Color', procColA,...
    'LineStyle', procLineStyle,...
    'LineSmoothing', 'on',...
    'parent', spX);
        
% y
text(0, 0, 'Y axis',...
    'Units', 'normalized',...
    'Color', [.7, .7, .7],...
    'Interpreter', 'none',...
    'FontName', 'Arial',...
    'FontWeight', 'bold',...
    'FontAngle', 'italic',...
    'FontSize', 24,...
    'VerticalAlignment', 'bottom',...
    'Parent', spY);

raw_yl = plot(timeSeries, gyl,...
    'LineWidth', rawWidth,...
    'LineStyle', rawLineStyle,...
    'Color', rawColL,...
    'LineSmoothing', 'on',...
    'parent', spY);

raw_yr = plot(timeSeries, gyr,...
    'LineWidth', rawWidth,...
    'LineStyle', rawLineStyle,...
    'Color', rawColR,...
    'LineSmoothing', 'on',...
    'parent', spY);

raw_y = plot(timeSeries, gy,...
    'LineWidth', rawWidth + 1,...
    'LineStyle', rawLineStyle,...
    'Color', rawColA,...
    'LineSmoothing', 'on',...
    'parent', spY);

interp_yl = plot(timeSeries, gyil,...
    'LineWidth', procWidth, 'Color', procColL,...
    'LineStyle', procLineStyle,...
    'LineSmoothing', 'on',...
    'parent', spY);

interp_yr = plot(timeSeries, gyir,...
    'LineWidth', procWidth, 'Color', procColR,...
    'LineStyle', procLineStyle,...
    'LineSmoothing', 'on',...
    'parent', spY);

interp_y = plot(timeSeries, gyi,...
    'LineWidth', procWidth + 1, 'Color', procColA,...
    'LineStyle', procLineStyle,...
    'LineSmoothing', 'on',...
    'parent', spY);

% missing data
miss = double(isnan(gy) | isnan(gx)) * .3;
bar(timeSeries, miss, 1,...
    'FaceColor', [.3, .3, .3],...
    'Parent', spEvents,...
    'EdgeColor', 'none');

ylim([0, 1])

% interpolated data
flags = double(interpFlags) * .3;
if ~isempty(flags)
    bar(timeSeries, flags, 1,...
        'FaceColor', intCol,...
        'Parent', spEvents,...
        'EdgeColor', 'none');
    ylim([0, 1])
    set(spEvents, 'visible', 'off');
end

% velocity
text(0, 0, 'Velocity',...
    'Color', [.7, .7, .7],...
    'Interpreter', 'none',...
    'FontName', 'Arial',...
    'FontWeight', 'bold',...
    'FontAngle', 'italic',...
    'FontSize', 24,...
    'VerticalAlignment', 'bottom',...
    'Parent', spVel);

plot(timeSeries, vel,...
    'LineWidth', 2,...
    'Color', [.7, 0, 0],...
    'LineSmoothing', 'on',...
    'parent', spVel);
ylim('auto')

% events
for e = 1:length(evLab)
    if ~strcmpi(filterOutEvents, evLab{e})
        
        line([evTimes(e), evTimes(e)], [0, 1],...
            'Color', evGapCols(e, :),...
            'Parent', spX);
        line([evTimes(e), evTimes(e)], [0, 1],...
            'Color', evGapCols(e, :),...
            'Parent', spY)
        line([evTimes(e), evTimes(e)], [0, 1],...
            'Color', evGapCols(e, :),...
            'Parent', spEvents)
        
        text(evTimes(e), 0.5, evLab{e}, 'Rotation', 0, 'EdgeColor', evGapCols(e, :),...
           'BackgroundColor', [1, 1, 1], 'Interpreter', 'none',...
           'HorizontalAlignment', 'left', 'VerticalAlignment', 'bottom',...
           'Parent', spEvents, 'FontSize', 9, 'FontWeight', 'bold')
       
    end
end

% aois
for a = 1:size(aois, 1)
    
    if strcmpi(showAoIs{1}, 'ALL') || any(strcmpi(showAoIs, aoiNames{a}))
        
        % X aoi
        rectangle('Parent', spX,...
            'EdgeColor', aoiCol,...
            'LineWidth', 1,...
            'LineStyle', '-',...
            'Position', [min(timeSeries), aois(a, 1), max(timeSeries), aois(a, 3) - aois(a, 1)]);
        text(max(timeSeries), aois(a, 1), aoiNames{a},...
            'Rotation', -90,...
            'Color', aoiCol,...
            'BackgroundColor', [1, 1, 1],...
            'EdgeColor', aoiCol,...
            'Interpreter', 'none',...
            'FontName', 'Arial',...
            'FontWeight', 'bold',...
            'FontSize', 8,...
            'Parent', spX);
        
        % Y aoi
        rectangle('Parent', spY,...
            'EdgeColor', aoiCol,...
            'LineWidth', 1,...
            'LineStyle', '-',...
            'Position', [min(timeSeries), aois(a, 2), max(timeSeries), aois(a, 4) - aois(a, 2)]);
        text(max(timeSeries), aois(a, 2), aoiNames{a},...
            'Rotation', -90,...
            'Color', aoiCol,...
            'BackgroundColor', [1, 1, 1],...
            'EdgeColor', aoiCol,...
            'Interpreter', 'none',...
            'FontName', 'Arial',...
            'FontWeight', 'bold',...
            'FontSize', 8,...
            'Parent', spY);        
    end
    
end

    function prepareEvents

        % prepare gap events
        evRaw = dc.Data{1}.EventBuffer;
        evTimes = cell2mat(evRaw(:, 2));
        evTimes = double(evTimes - evTimes(1)) / 1000000;
        
        % separate label and data events
        idxLab = cellfun(@ischar, evRaw(:, 3));
        idxData = cellfun(@iscell, evRaw(:, 3));
        evRawData = evRaw(idxData, :);
        evRawData(:, 3) = cellfun(@(x) x{1}, evRawData(:, 3), 'uniform', 0);
        evRaw = etSortEvents([evRaw(idxLab, :); evRawData]);
        evLab = evRaw(:, 3);

        % remove underscores (to categorise gap events, so cs_onset and cs_offset
        % belong to the same cat, and end up with the same colour code assigned)
        evGapCat = cellfun(@(x) x(1:strfind(x, '_') - 1), evLab,...
            'UniformOutput', 0);

        % get unique categories
        [evGapCatU, ~, evGapCatIdx] = unique(evGapCat);

        % get colormap colours, assign to categories
        cMap = winter(length(evGapCatU));
        evGapColU = cMap(1:length(evGapCatU), :);
        evGapCols = evGapColU(evGapCatIdx, :);
        
        % extract AOIs
        evAoIs = etFilterEvents(dc.Data{1}.EventBuffer, 'ADDAOI');
        if ~isempty(evAoIs)
            aois = cell2mat(cellfun(@(x) x{2}, evAoIs(:, 3), 'uniform', 0));
            aoiNames = cellfun(@(x) x{3}, evAoIs(:, 3), 'uniform', 0);
        else 
            aois = [];
        end
    end

end